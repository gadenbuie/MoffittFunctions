% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pretty_output_functions.R
\name{run_pretty_model_output}
\alias{run_pretty_model_output}
\title{Wrapper for Pretty Model Output}
\usage{
run_pretty_model_output(x_in, model_data, y_in, event_in = NULL,
  ref_or_censor_level = NULL, title_name = NULL,
  fail_if_warning = TRUE, conf_level = 0.95,
  overall_p_test_stat = c("Wald", "LR"), est_digits = 3,
  p_digits = 4, latex_output = FALSE, sig_alpha = 0.05,
  background = "yellow", verbose = FALSE, ...)
}
\arguments{
\item{x_in}{name of x variables in model (can be vector of x names)}

\item{model_data}{data.frame or tibble that contains \code{x_in}, \code{time_in}, and \code{event_in} variables}

\item{y_in}{name of outcome measure for logistic and linear model, or name of time component in cox model}

\item{event_in}{name of event stauts. If \code{ref_or_censor_level} = NULL then this must be the name of a T/F or 0/1 variable}

\item{ref_or_censor_level}{outcome variable reference level for logistic model, and censor level for cox model.}

\item{title_name}{title to use (will be repeated in first column)}

\item{fail_if_warning}{Should program stop and give useful message if there is a warning message when running model (Default is TRUE)}

\item{conf_level}{the confidence level required (default is 0.95).}

\item{overall_p_test_stat}{"Wald" (default) or "LR"; the test.statistic to pass through to the test.statistic param in car::Anova. Ignored for lm fits.}

\item{est_digits}{number of digits to round OR or HR to (default is 3)}

\item{p_digits}{number of digits to round p values (default is 4)}

\item{latex_output}{will this table go into a latex output (making special charaters latex friendly)}

\item{sig_alpha}{the defined significance level for highlighting. Default = 0.05 (Only used if latex_output = TRUE)}

\item{background}{background color of significant values, or no highlighting if NULL. Default is "yellow" (Only used if latex_output = TRUE)}

\item{verbose}{a logical variable indicating if warnings and messages should be displayed. Default FALSE.}

\item{...}{other params to pass to \code{pretty_pvalues} (i.e. \code{bold} or \code{italic})}
}
\value{
A tibble with: \code{Name} (if provided), \code{Variable}, \code{Level}, \code{Est/OR/HR (95\% CI)}, \code{P Value} (for categorical variables comparing to reference), \code{Overall P Value} (for categorical variables with 3+ levels), \code{n/n (event)}.
}
\description{
Wrapper for pretty_model_output(). This function takes a dataset, along with variables names for x (could be multiple), y, and possibly event status, for model fit.
}
\details{
\code{x_in} can be single variable name, or vector of variables to include in the model. All variables must be present in the \code{model_data} dataset.

\code{fail_if_warning} variable default to TRUE because most warnings should be addressed, such as the "Loglik converged before variable XX; beta may be infinite" warning.
}
\examples{

# Basic linear model example
set.seed(542542522)
ybin <- sample(0:1, 100, replace = TRUE)
ybin2 <- sample(c('Male','Female'), 100, replace = TRUE)
ybin3 <- sample(c('Dead','Alive'), 100, replace = TRUE)
y <- rexp(100,.1)
x1 <- factor(sample(LETTERS[1:2],100,replace = TRUE))
x2 <- factor(sample(letters[1:4],100,replace = TRUE))
my_data <- data.frame(y, ybin, ybin2, ybin3, x1, x2)
Hmisc::label(my_data$x1) <- "X1 Variable"

 # Single runs 
run_pretty_model_output(x_in = 'x1', model_data = my_data, y_in = 'y', event_in = 'ybin')
run_pretty_model_output(x_in = 'x1', model_data = my_data, y_in = 'y', 
     event_in = 'ybin3', ref_or_censor_level = 'Alive')
run_pretty_model_output(x_in = c('x1','x2'), model_data = my_data, y_in = 'y', event_in = 'ybin')
run_pretty_model_output(x_in = 'x2', model_data = my_data, y_in = 'ybin', event_in = NULL, verbose = T)
run_pretty_model_output(x_in = 'x2', model_data = my_data, y_in = 'y', event_in = NULL)

# Multiple runs for different variables
library(dplyr) 
vars_to_run = c('x1', 'x2')
cox_models <- purrr::map_dfr(vars_to_run, run_pretty_model_output, model_data = my_data, 
     y_in = 'y', event_in = 'ybin')

kableExtra::kable(cox_models, 'html', caption = 'My Table') \%>\% 
  kableExtra::collapse_rows(c(1:2), row_group_label_position = 'stack', headers_to_remove = 1:2)

# Real World Example
data(Bladder_Cancer)
vars_to_run = c('Gender', 'Clinical_Stage_Grouped', 'PT0N0', 'Any_Downstaging')

univariate_output <- purrr::map_dfr(vars_to_run, run_pretty_model_output, model_data = Bladder_Cancer, 
      y_in = 'Survival_Months', event_in = 'Vital_Status', ref_or_censor_level = 'Alive')
kableExtra::kable(univariate_output, 'html') \%>\% 
      kableExtra::collapse_rows(c(1:2), row_group_label_position = 'stack', headers_to_remove = 1:2)

multivariable_output <- run_pretty_model_output(vars_to_run, model_data = Bladder_Cancer, 
      y_in = 'Survival_Months', event_in = 'Vital_Status', ref_or_censor_level = 'Alive')
kableExtra::kable(multivariable_output, 'html') \%>\% 
      kableExtra::collapse_rows(c(1:2), row_group_label_position = 'stack', headers_to_remove = 1:2)


}
