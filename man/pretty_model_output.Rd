% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pretty_output_functions.R
\name{pretty_model_output}
\alias{pretty_model_output}
\title{Fancy Table Output of Linear, Logistic, and Cox Models}
\usage{
pretty_model_output(model_fit, model_data, est_digits = 3, p_digits = 4,
  est_name = c("Est", "OR", "HR"), sig_alpha = 0.05,
  overall_p_test_stat = c("Wald", "LR"))
}
\arguments{
\item{model_fit}{lm, glm, or coxph fit (currently only tested on logistic glm fit)}

\item{model_data}{dataset used to create model fits. Used for capturing variable labels, if they exist}

\item{est_digits}{number of digits to round OR or HR to}

\item{p_digits}{number of digits to round p values}

\item{est_name}{Name to call the estimate variable}

\item{sig_alpha}{the defined significance level. Default = 0.05}

\item{overall_p_test_stat}{"Wald" (default) or "LR"; the test.statistic to pass through to the test.statistic param in car::Anova}
}
\description{
pretty_model_output() takes a Linear, Logistic, and Cox model fit object and calculate estimates, odds ratios, or hazard ratios, respectively, with confidence intervals. P values are also produced. For categorical variables with 3+ levels overall Type 3 p values are calculated.
}
\examples{

# Basic linear model example
set.seed(542542522)
y <- rnorm(100)
x1 <- rnorm(100)
x2 <- y + rnorm(100)
x3 <- factor(sample(letters[1:4],100,replace = TRUE))
my_model_data <- data.frame(y, x1, x2, x3)
my_model_fit <- lm(y ~ x1 + x2 + x3, data = my_model_data)
my_pretty_model_output <- pretty_model_output(model_fit = my_model_fit, model_data = my_model_data, est_digits = 3, p_digits = 4, est_name = 'Est')

# Printing of Fancy table in Latex
kableExtra::kable(my_pretty_model_output \%>\% select(-line_ind), 
                  'latex', escape = F, longtable = F, booktabs = TRUE, linesep = '', caption = 'My Fig') \%>\% 
  kableExtra::row_spec(which(my_pretty_model_output$line_ind), hline_after = T)  \%>\% 
  kableExtra::kable_styling(font_size = 9) \%>\% 
  kableExtra::footnote(number = c('Model predicting y', paste0('Model sample size is n=',nrow(my_model_fit$model))))


}
